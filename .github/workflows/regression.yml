name: Regression
run-name: ${{ github.actor }} ðŸš€ - Regression

on:
  schedule:
    - cron: '0 11 * * 1-5'
    - cron: '10 11 * * 1-5'
  workflow_dispatch:
    inputs:
      CONFIGURED_TESTING_BRANCH:
        required: false
        description: 'CONFIGURED_TESTING_BRANCH - If select a specific branch, you can ignore inputting value for variables below (the default values for the selected options will be applied)'
        default: 'None'
        type: 'choice'
        options:
          - 'None'
          - 'F23.5'
          - 'F23.6'
      force_recreate_service_set:
        default: true
        type: boolean
      SERVICE_SET:
        type: string
      TESTING_HOST:
        type: string
      TESTING_HOST_ADMIN_USERNAME:
        type: string
      TESTING_HOST_PASSWORD:
        type: string
      GAROON_BRANCH_NAME:
        type: string
      ARCHIVE_FOLDER:
        description: 'ARCHIVE_FOLDER (e.g: 202305100817_1172324, if not using an task branch, ignore this to install with latest archive)'
        type: string
      GAROON_ARCHIVE:
        description: 'GAROON_ARCHIVE (e.g: garoon-GRF23.5_1172324.tgz, if not using an task branch, ignore this to install with latest archive)'
        type: string
      GAROON_TYPE:
        type: choice
        default: 'Cloud'
        options:
          - 'cloud'
          - 'large_scale_linux'
          - 'normal_linux'
          - 'normal_windows'

jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get Environment Variables
        uses: actions/github-script@v6
        with:
          script: |
            const envInfo = require("./.github/workflows/environment_vars.json");
            const commonInfo = envInfo.commonInfo;            
            const scheduledBranches = {
              "0 11 * * 1-5": "F23.5",
              "10 11 * * 1-5": "F23.6"
            }
            const branchName = "${{ github.event_name }}" == "workflow_dispatch"
              ? "${{ github.event.inputs.CONFIGURED_TESTING_BRANCH}}"
              : scheduledBranches["${{ github.event.schedule }}"];
            
            core.exportVariable("MAIL_SERVER_NAME", commonInfo.mailServer.name);
            core.exportVariable("OUTGOING_MAIL_SERVER", commonInfo.mailServer.outgoingMailServer);
            core.exportVariable("OUTGOING_PORT_NUMBER", commonInfo.mailServer.outgoingPortNumber.cloud);
            core.exportVariable("OUTGOING_PORT_NUMBER_CLOUD", commonInfo.mailServer.outgoingPortNumber.cloud);
            core.exportVariable("OUTGOING_PORT_NUMBER_ONPRE", commonInfo.mailServer.outgoingPortNumber.onpre);
            core.exportVariable("ENCRYPTION_TYPE", commonInfo.mailServer.encryptionType);
            core.exportVariable("SMTP_AUTHENTICATION_TYPE", commonInfo.mailServer.smtpAuthenticationType);
            core.exportVariable("INCOMING_MAIL_SERVER", commonInfo.mailServer.incomingMailServer);
            core.exportVariable("RECEIVE_PROTOCOL", commonInfo.mailServer.receiveProtocol);
            core.exportVariable("INCOMING_PORT_NUMBER", commonInfo.mailServer.incomingPortNumber);
            core.exportVariable("USE_OF_SSL", commonInfo.mailServer.useOfSsl);
            
            core.exportVariable("USER_EMAIL_ADDRESS", commonInfo.emailAccount.address);
            core.exportVariable("EMAIL_USER_ACCOUNT", commonInfo.emailAccount.account);
            core.exportVariable("EMAIL_ACCOUNT_PASSWORD", commonInfo.emailAccount.password);
            
            core.exportVariable("APP_ID", commonInfo.mailSourceLibKintoneApp.id);
            core.exportVariable("API_TOKEN", "${{ secrets.KINTONE_API_TOKEN }}");
            core.exportVariable("IGNORE_MAILSOURCE_IDS", commonInfo.mailSourceLibKintoneApp.ignoreMailsourceIds);
            
            core.exportVariable("IS_SET_UP_MAIL_ACCOUNT", commonInfo.setupOptions.isSetupMailAccount);
            core.exportVariable("IS_CREATE_MAIL_FOLDER", commonInfo.setupOptions.isCreateMailFolder);
            core.exportVariable("force_recreate_service_set", commonInfo.setupOptions.forceRecreateServiceSet);
            
            core.exportVariable("GAROON_BRANCH_NAME", branchName);
            core.exportVariable("DOWNLOAD_VM_IP", commonInfo.forDownloadArchiveInfo.downloadVm.ip);
            core.exportVariable("DOWNLOAD_VM_USERNAME", commonInfo.forDownloadArchiveInfo.downloadVm.username);
            core.exportVariable("DOWNLOAD_VM_PASSWORD", commonInfo.forDownloadArchiveInfo.downloadVm.password);

            if (branchName != "None") {
              const siteTestInfo = envInfo["branchName"];
  
              core.exportVariable("SERVICE_SET", siteTestInfo.serviceSet);
              core.exportVariable("TESTING_HOST", siteTestInfo.testingHost);
              core.exportVariable("GAROON_VERSION", siteTestInfo.garoonVersion);
              core.exportVariable("GAROON_TYPE", siteTestInfo.garoonType);
              core.exportVariable("ADMIN_USER_NAME", siteTestInfo.adminUsername);
              core.exportVariable("PASSWORD", siteTestInfo.password);
            }
      - name: Update Environment Variables From Manual Trigger
        if: github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable("force_recreate_service_set", ${{ github.event.inputs.force_recreate_service_set }});
            core.exportVariable("SERVICE_SET", "${{ github.event.inputs.SERVICE_SET }}" || "${{ env.SERVICE_SET }}");
            core.exportVariable("TESTING_HOST", "${{ github.event.inputs.TESTING_HOST }}" || "${{ env.TESTING_HOST }}");
            core.exportVariable("ADMIN_USER_NAME", "${{ github.event.inputs.TESTING_HOST_ADMIN_USERNAME }}" || "${{ env.ADMIN_USER_NAME }}");
            core.exportVariable("PASSWORD", "${{ github.event.inputs.TESTING_HOST_PASSWORD }}" || "${{ env.PASSWORD }}");
            core.exportVariable("GAROON_BRANCH_NAME", "${{ github.event.inputs.GAROON_BRANCH_NAME }}" || "${{ env.GAROON_BRANCH_NAME }}");
            core.exportVariable("ARCHIVE_FOLDER", "${{ github.event.inputs.ARCHIVE_FOLDER }}");
            core.exportVariable("GAROON_ARCHIVE", "${{ github.event.inputs.GAROON_ARCHIVE }}");
            core.exportVariable("GAROON_TYPE", "${{ github.event.inputs.GAROON_TYPE }}" || "${{ env.GAROON_TYPE }}");
            core.exportVariable("OUTGOING_PORT_NUMBER", "${{ env.GAROON_TYPE}}" == "Cloud" ? ${{ env.OUTGOING_PORT_NUMBER_CLOUD }} : ${{ env.OUTGOING_PORT_NUMBER_ONPRE }});
      - name: Sprint Env
        run: |
          ./reflect_config.sh \
          ${{ env.TESTING_HOST }} ${{ env.GAROON_VERSION }} ${{ env.ADMIN_USER_NAME }} ${{ env.PASSWORD }} ${{ env.GAROON_TYPE }} \
          ${{ env.MAIL_SERVER_NAME }} ${{ env.OUTGOING_MAIL_SERVER }} ${{ env.OUTGOING_PORT_NUMBER }} ${{ env.ENCRYPTION_TYPE }} ${{ env.SMTP_AUTHENTICATION_TYPE }} ${{ env.INCOMING_MAIL_SERVER }} ${{ env.RECEIVE_PROTOCOL }} ${{ env.INCOMING_PORT_NUMBER }} ${{ env.USE_OF_SSL }} \
          ${{ env.USER_EMAIL_ADDRESS }} ${{ env.EMAIL_USER_ACCOUNT }} ${{ env.EMAIL_ACCOUNT_PASSWORD }} \
          ${{ env.APP_ID }} ${{ env.API_TOKEN }} ${{ env.IGNORE_MAILSOURCE_IDS }}
          
          cat ./config/testing.properties
